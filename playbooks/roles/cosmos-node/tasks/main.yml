---
# tasks file for playbooks/roles/cosmos-node

#
# setup cosmos-sdk environment
#
- name: setup shell "aliases" for "cosmos-setup" dir
  blockinfile:
    path: "{{ sa_user_home }}/.bashrc"
    block: |
      alias cosmos-setup='cd /tmp/ansible'
  tags: setup

- name: setup bash_profile ENV of "service-account-user"
  blockinfile:
    create: yes
    path: "{{ sa_user_home }}/.profile"
    block: |
      export GAIAD_HOME="{{ sa_user_home }}/go"
      export GOLANG_HOME="/usr/local/go"
      export PATH=$GAIAD_HOME/bin:$GOLANG_HOME/bin:$PATH
    owner: "{{ sa_user }}"
    group: "{{ sa_user }}"
  tags: setup

- name: apply "service-account-user" custom ENV setup
  shell: |
    source {{ sa_user_home }}/.profile
  args:
    executable: /bin/bash
  tags: setup

- name: check "golang-libs" folder existence
  stat:
    path: /usr/local/go
  register: golang_dir
  tags: setup

- debug:
    msg: "path exists and is a directory"
  when: golang_dir.stat.isdir is defined and golang_dir.stat.isdir
  tags: setup

- name: setup "golang-libs" folder
  file:
    path: /usr/local/go
    state: directory
    recurse: yes
    mode: 0775
  when: golang_dir.stat.isdir is not defined
  tags: setup

- name: setup cosmos-sdk building/supporting libs
  apt: name={{ item }} state=latest
  loop:
    - git
    - tree
    - vim
  tags: setup

- name: setup extra python packages/tools
  pip: name={{item}} state=latest executable=pip3
  loop:
    - pip
    - glances
    - yq
  tags: setup

#
# run "golang" and "cosmos-sdk" installation
#
- stat:
    path: /usr/local/go
  register: golang_dir
  tags: install

- fail:
    msg: "whoops! initialize with './bin/provision -t setup'"
  when: golang_dir.stat.isdir is not defined
  tags: install

- name: download and install "golang"
  unarchive:
    src: https://go.dev/dl/go1.17.8.linux-amd64.tar.gz
    dest: /usr/local/go
    extra_opts: ['--strip-components=1']
    remote_src: yes
  tags: install

- name: download and install "cosmos-sdk"
  shell: |
    source {{ sa_user_home }}/.profile
    rm -rf {{ sa_user_home }}/{gaia,go}
    cd {{ sa_user_home }} && git clone -b {{ cosmos_sdk_ver }} https://github.com/cosmos/gaia
    cd {{ sa_user_home }}/gaia && make install
  args:
    executable: /bin/bash
  become_method: su
  become_user: "{{ sa_user }}"
  tags: install

#
# check/verify "cosmos-sdk" installation
#
- stat:
    path: "{{ sa_user_home }}/go/bin/gaiad"
  register: gaiad_bin
  tags: check

- fail:
    msg: "whoops! cosmos-sdk is yet to be installed"
  when: gaiad_bin.stat.isreg is not defined
  tags: check

- name: check "cosmos-sdk" installation
  shell: |
    {{ sa_user_home }}/go/bin/gaiad version
  register: gaiad_ver
  tags: check

- debug:
    var: gaiad_ver
  tags: check

#
# check/verify "golang" installation
#
- stat:
    path: /usr/local/go/bin/go
  register: golang_bin
  tags: check

- fail:
    msg: "whoops! golang is yet to be installed"
  when: golang_bin.stat.isreg is not defined
  tags: check

- name: check "golang" installation
  shell: |
    /usr/local/go/bin/go version
  register: golang_ver
  tags: check

- debug:
    var: golang_ver
  tags: check

#
# bootstrap cosmos-hub node
#
- name: initialize chain "cosmos-hub-4"
  shell: |
    source {{ sa_user_home }}/.profile
    gaiad init figment-node --overwrite
  args:
    executable: /bin/bash
  register: gaiad_init
  become_method: su
  become_user: "{{ sa_user }}"
  tags: bootstrap

- debug:
    var: gaiad_init
  tags: bootstrap

#
# join and sync cosmos-hub node
#
- name: join cosmos-hub network using cosmos-sdk-ver-4
  script: cosmos-genesis-setup-{{ cosmos_sdk_ver }}.sh
  args:
    executable: /bin/bash
  register: cosmos_sync_v4
  when: cosmos_sdk_ver == 'v4.2.1'
  tags: sync

- debug:
    var: cosmos_sync_v4
  tags: sync

- name: join cosmos-hub network using cosmos-sdk-ver-6
  script: cosmos-genesis-setup-{{ cosmos_sdk_ver }}.sh
  args:
    executable: /bin/bash
  register: cosmos_sync_v6
  when: cosmos_sdk_ver == 'v6.0.0'
  tags: sync

- debug:
    var: cosmos_sync_v6
  tags: sync

- name: add cosmos-hub-4 systemd unit file
  template:
    src: systemd.service.gaiad.j2
    dest: /etc/systemd/system/gaiad.service
  notify:
    - "restart gaiad"
  tags: run

- name: add gaiad-config-toml config file
  template:
    src: gaiad.config.toml.j2
    dest: "{{ sa_user_home }}/.gaia/config/config.toml"
  notify:
    - "restart gaiad"
  tags: run

# - name: start added service and enable at boot time
#   systemd:
#     name: gaiad
#     state: started
#     daemon_reload: yes
#     enabled: yes
#   tags: run
